/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gamelatbai;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.Timer;

/**
 *
 * @author MeeHine
 */
public class GameLatHinh extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form GameLatHinh
     */
    public GameLatHinh(int k, int score) {
        this.setTitle("CodeLearn - Game Lật Hình");
        level = k;
        
        m = sizeX[k];
        n = sizeY[k];
        maxTime = TIME[k] * 10;
        time = 0;
        
        initComponents();
        init(k, score);
        

        timer = new Timer(240, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                open();
                timer.stop();
            }
        });

        timer2 = new Timer(100, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                time++;
                progressTime.setValue(maxTime - time);
                if (maxTime == time) {
                    timer2.stop();
                    showDialogNewGame("Hết thời gian.\n"
                            + "Điểm: " + score_bt.getText() + "\n"
                            + "Bạn có muốn chơi lại không?", "Thông báo");
                }
            }
        });

    }

    private void init(int k, int score) {
//        m = sizeX[k];
//        n = sizeY[k];
//        maxTime = TIME[k] * 10;
//        time = 0;
//        for (int i = 0; i < m; i++) {
//            for (int j = 0; j < n; j++) {
//                bt[i][j] = new JButton();
//                pn.add(bt[i][j]);
//                bt[i][j].setActionCommand(i + " " + j);
//                bt[i][j].addActionListener(this);
//                bt[i][j].setBackground(Color.black);
//                a[i][j] = (int) (Math.random() * 2 + 1);
//                bt[i][j].setIcon(getIcon(0));
//                tick[i][j] = true;
//            }
//        }
        score_bt = new JButton(String.valueOf(score));
        score_bt.setFont(new Font("UTM Nokia", 1, 20));
        score_bt.setBackground(Color.white);
    }
//    private void init2(){
//        for (int i = 0; i < m; i++) {
//            for (int j = 0; j < n; j++) {
//                bt[i][j] = new JButton();
//                pn.add(bt[i][j]);
//                bt[i][j].setActionCommand(i + " " + j);
//                bt[i][j].addActionListener(this);
//                bt[i][j].setBackground(Color.black);
//                a[i][j] = (int) (Math.random() * 2 + 1);
//                bt[i][j].setIcon(getIcon(0));
//                tick[i][j] = true;
//            }
//        }
//        score_bt = new JButton(String.valueOf(score));
//        score_bt.setFont(new Font("UTM Nokia", 1, 20));
//        score_bt.setBackground(Color.white);
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pn = new javax.swing.JPanel();
        pn2 = new javax.swing.JPanel();
        score_bt = new javax.swing.JButton();
        score_lb = new javax.swing.JLabel();
        progressTime = new javax.swing.JProgressBar(0, maxTime);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        pn.setLayout(new java.awt.GridLayout(m, n));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                bt[i][j] = new JButton();
                pn.add(bt[i][j]);
                bt[i][j].setActionCommand(i + " " + j);
                bt[i][j].addActionListener(this);
                bt[i][j].setBackground(Color.black);
                a[i][j] = (int) (Math.random() * 2 + 1);
                bt[i][j].setIcon(getIcon(0));
                tick[i][j] = true;
            }
        }

        pn2.add(score_bt);

        score_lb.setText("Score: ");
        pn2.add(score_lb);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 467, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(progressTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(pn2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(progressTime, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(pn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 235, Short.MAX_VALUE)
                .addComponent(pn2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        progressTime.setValue(maxTime);
        progressTime.setForeground(Color.orange);
        createMatrix();
        showMatrix();
        setSize(n * 120, m * 170 + 90);
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setLocationRelativeTo(null);
        setResizable(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameLatHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameLatHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameLatHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameLatHinh.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameLatHinh(0, 100).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pn;
    private javax.swing.JPanel pn2;
    private javax.swing.JProgressBar progressTime;
    private javax.swing.JButton score_bt;
    private javax.swing.JLabel score_lb;
    // End of variables declaration//GEN-END:variables

    int count = 0, id, preX, preY, X, Y;
    int level = 0, hit = 0, h;
    int sizeX[] = {2, 2, 2, 3, 4, 4, 4, 4, 5, 5};
    int sizeY[] = {3, 4, 6, 6, 6, 7, 8, 10, 10, 12};
    int TIME[] = {10, 20, 30, 50, 65, 80, 100, 120, 140, 150}; // mànt 1 kết thúc sau 10 giây
    int maxTime = 30, time = 0;
    boolean loss = false;
    int BOM, dem = 0;
    int maxXY = 100;
    int m = 2, n = 3;
//    private JProgressBar progressTime;
    private JButton bt[][] = new JButton[maxXY][maxXY];
    private boolean tick[][] = new boolean[maxXY][maxXY];
    private int a[][] = new int[maxXY][maxXY];
    private int xFood, yFood;
    Timer timer, timer2;

    public void open() {
        if (id == a[X][Y]) {
            bt[preX][preY].setIcon(getIcon(-1));
            a[X][Y] = a[preX][preY] = 0;
            tick[X][Y] = tick[preX][preY] = false;
            bt[X][Y].setBorder(null);
            bt[preX][preY].setBorder(null);
            showMatrix();
            bt[X][Y].setIcon(getIcon(-1));
            score_bt.setText(String.valueOf(Integer.parseInt(score_bt.getText()) + 100));
            hit++;
            if (hit == m * n / 2) {
                timer.stop();
                timer2.stop();
                nextGame();
            }
        } else {
            bt[preX][preY].setIcon(getIcon(0));
            bt[X][Y].setIcon(getIcon(0));
            tick[preX][preY] = true;
            tick[X][Y] = true;
            score_bt.setText(String.valueOf(Integer.parseInt(score_bt.getText()) - 10));
        }
    }
//    public GameLatHinh(int k, int score) {
//        this.setTitle("CodeLearn - Game Lật Hình");
//        level = k;
//        cn = init(k, score);
//        timer = new Timer(240, new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                open();
//                timer.stop();
//            }
//        });
//
//        timer2 = new Timer(100, new ActionListener() {
//            public void actionPerformed(ActionEvent e) {
//                time++;
//                progressTime.setValue(maxTime - time);
//                if (maxTime == time) {
//                    timer2.stop();
//                    showDialogNewGame("Hết thời gian.\n"
//                            + "Điểm: " + score_bt.getText() + "\n"
//                            + "Bạn có muốn chơi lại không?", "Thông báo");
//                }
//            }
//        });
//    }

    public void createMatrix() {
        int images = 50;
        int N = m * n;
        int b[] = new int[m * n + images];
        int c[] = new int[m * n + images];
        for (int i = 0; i < images; i++) {
            b[i] = i;
            c[i] = (int) (Math.random() * 1000000);
        }
        for (int i = 0; i < images - 1; i++) {
            for (int j = i + 1; j < images; j++) {
                if (c[i] > c[j]) {
                    int tmp = b[i];
                    b[i] = b[j];
                    b[j] = tmp;
                    tmp = c[i];
                    c[i] = c[j];
                    c[j] = tmp;
                }
            }
        }
        for (int i = N / 2; i < N; i++) {
            b[i] = b[i - N / 2];
        }
        for (int i = 0; i < m * n; i++) {
            c[i] = (int) (Math.random() * 1000000);
        }
        for (int i = 0; i < N - 1; i++) {
            for (int j = i + 1; j < N; j++) {
                if (c[i] > c[j]) {
                    int tmp = b[i];
                    b[i] = b[j];
                    b[j] = tmp;
                    tmp = c[i];
                    c[i] = c[j];
                    c[j] = tmp;
                }
            }
        }
        N = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                a[i][j] = b[N++];
            }
        }
    }

    public void showMatrix() {
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.printf("%3d", a[i][j]);
            }
            System.out.println();
        }
        System.out.println("-----------------");
        System.out.println();
    }

    private Icon getIcon(int index) {
        int width = 120, height = 170;
        Image image = new ImageIcon(getClass().getResource("/icon/icon" + index + ".jpg")).getImage();
        Icon icon = new ImageIcon(image.getScaledInstance(width, height, image.SCALE_SMOOTH));
        return icon;
    }

    public void newGame() {
        this.dispose();
        new GameLatHinh(0, 100);
    }

    public void nextGame() {
        this.dispose();
        new GameLatHinh(level + 1, Integer.parseInt(score_bt.getText()) + (maxTime - time) / 50);
    }

    public void showDialogNewGame(String message, String title) {
        int select = JOptionPane.showOptionDialog(null, message, title,
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                null, null);
        if (select == 0) {
            newGame();
        } else {
            System.exit(0);
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        timer2.start();
        // TODO Auto-generated method stub
        int i, j;
        String s = e.getActionCommand();
        int k = s.indexOf(32);
        i = Integer.parseInt(s.substring(0, k));
        j = Integer.parseInt(s.substring(k + 1, s.length()));
        if (tick[i][j]) {
            tick[i][j] = false;
            if (count == 0) {
                bt[i][j].setIcon(getIcon(a[i][j]));
                id = a[i][j];
                preX = i;
                preY = j;
            } else {
                bt[i][j].setIcon(getIcon(a[i][j]));
                X = i;
                Y = j;
                timer.start();
            }
            count = 1 - count;
        }
    }
}
