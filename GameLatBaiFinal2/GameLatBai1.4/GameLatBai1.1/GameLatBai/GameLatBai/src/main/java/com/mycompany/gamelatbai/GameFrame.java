/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.gamelatbai;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import java.util.ArrayList;
import java.util.Collections;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.border.EmptyBorder;
import javax.swing.plaf.DimensionUIResource;

/**
 *
 * @author ezlik
 */
public class GameFrame extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form GameFrame
     */
    public GameFrame(int k, int diem) {
        level = k;
//        if(level == 0){
//            diem = 0;
//        }
        m = sizeX[k];
        n = sizeY[k];
        solabai = m * n;
        labais = new Card[solabai];
        mats = new ImageIcon[solabai / 2];
        maxTime = TIME[k] * 10;
        time = 0;

        initComponents();   //Khoi Tao Thanh Phan cua Giao Dien
        khoitaoMatLaBai();
        khoitaoGame(diem);
        thoigian = new Timer(100, new ActionListener() {  //Thoi gian bat dau dem nguoc
            public void actionPerformed(ActionEvent e) {
                time++;
                progressTime.setValue(maxTime - time);
                if (maxTime == time) {
                    thoigian.stop();
                    showDialogNewGame("Hết thời gian, bạn đã thua.\n"
                            + "Điểm: " + tvDiem.getText() + "\n"
                            + "Bạn có muốn chơi lại không?", "Thông báo");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        int width = n * 160;
        int height = m * 160 + 60;
        Dimension preferredSize = new Dimension(width, height);
        topPanel = new javax.swing.JPanel();
        progressTime = new javax.swing.JProgressBar(0, maxTime);
        tvHelp = new javax.swing.JLabel();
        tvClose = new javax.swing.JLabel();
        gamePanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        tvDiem = new javax.swing.JTextField();
        btnChoi = new javax.swing.JButton();
        btnTron = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Game Lat Bai");
        setIconImages(null);
        setLocation(new java.awt.Point(0, 0));
        setUndecorated(true);
        setPreferredSize(preferredSize);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(new java.awt.BorderLayout(5, 2));

        topPanel.setPreferredSize(new java.awt.Dimension(300, 25));
        topPanel.setLayout(new java.awt.BorderLayout());

        progressTime.setValue(maxTime);
        progressTime.setForeground(new java.awt.Color(239, 129, 47));
        progressTime.setToolTipText("Ban co the nhan giu va keo de tuy chinh vi tri cua tro choi");
        progressTime.setCursor(new java.awt.Cursor(java.awt.Cursor.MOVE_CURSOR));
        progressTime.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                topPanelMouseDragged(evt);
            }
        });
        topPanel.add(progressTime, java.awt.BorderLayout.CENTER);

        tvHelp.setForeground(new java.awt.Color(213, 18, 121));
        tvHelp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tvHelp.setText("?");
        tvHelp.setPreferredSize(new java.awt.Dimension(25, 25));
        tvHelp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tvHelpMouseClicked(evt);
            }
        });
        topPanel.add(tvHelp, java.awt.BorderLayout.LINE_START);

        tvClose.setForeground(new java.awt.Color(213, 18, 121));
        tvClose.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tvClose.setText("X");
        tvClose.setToolTipText("");
        tvClose.setPreferredSize(new java.awt.Dimension(25, 25));
        tvClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tvCloseMouseClicked(evt);
            }
        });
        topPanel.add(tvClose, java.awt.BorderLayout.LINE_END);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        gamePanel.setBackground(new java.awt.Color(78, 204, 255));
        //int widthPanel = n * 160;
        //int heightPanel = m * 160;
        //Dimension preferredSizePanel = new Dimension(widthPanel, heightPanel);
        gamePanel.setPreferredSize(preferredSize);
        int margin = 10;
        EmptyBorder border = new EmptyBorder(margin, margin, margin, margin);
        gamePanel.setBorder(border);
        gamePanel.setLayout(new java.awt.GridLayout(m, n, 10, 10));
        setSize(preferredSize);
        getContentPane().add(gamePanel, java.awt.BorderLayout.CENTER);

        controlPanel.setLayout(new java.awt.GridLayout(1, 0, 2, 2));

        tvDiem.setEditable(false);
        tvDiem.setBackground(new java.awt.Color(213, 18, 121));
        tvDiem.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        tvDiem.setForeground(new java.awt.Color(255, 255, 255));
        tvDiem.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        controlPanel.add(tvDiem);

        btnChoi.setBackground(new java.awt.Color(137, 217, 121));
        btnChoi.setForeground(new java.awt.Color(0, 0, 0));
        btnChoi.setText("Choi Moi");
        btnChoi.setPreferredSize(new java.awt.Dimension(72, 29));
        btnChoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChoiActionPerformed(evt);
            }
        });
        controlPanel.add(btnChoi);

        btnTron.setBackground(new java.awt.Color(249, 245, 134));
        btnTron.setForeground(new java.awt.Color(0, 0, 0));
        btnTron.setText("Tron Bai");
        btnTron.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTronActionPerformed(evt);
            }
        });
        controlPanel.add(btnTron);
        btnChoi.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
        tvDiem.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));
        btnTron.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));

        getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_END);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //CodeGame
    private void khoitaoGame(int diem) {
//        diem = 0;  //Dat diem = 0
        int x = 0;
        for (int i = 0; i < labais.length; i++) {
            labais[i] = new Card(mats[x], new ImageIcon(getClass().getResource("/images/logo.png")));
            labais[i].addActionListener((ActionListener) this);
            gamePanel.add(labais[i]);
            if ((i + 1) % 2 == 0) {
                x++;
            }
        }
        tvDiem.setText(String.valueOf(diem));
//        tvDiem.setText(String.valueOf(Integer.parseInt(tvDiem.getText())));
//        tvDiem.setText(String.valueOf(diem));
        tronBai();  //Tron
    }

    private ImageIcon taoMat(Image img) {
        BufferedImage bi = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_RGB);
        bi.createGraphics().drawImage(img, 0, 0, null);
        img = bi.getScaledInstance(120, 120, img.SCALE_SMOOTH);
        return new ImageIcon(img);
    }

    private void khoitaoMatLaBai() {
        ImageIcon icon;
        ArrayList<Integer> bl = new ArrayList<Integer>();
        for (int i = 0; i < 17;) {
            int x = (int) (Math.random() * 17);
            if (!bl.contains(x)) {
                bl.add(x);
                i++;
            }
            System.out.println(bl);
        }
        for (int i = 0; i < mats.length; i++) {
            icon = new ImageIcon(getClass().getResource("/images/img" + bl.get(i) + ".png"));
            if (icon != null) {
                Image img = icon.getImage();
                mats[i] = taoMat(img);
            } else {
                JOptionPane.showMessageDialog(null, "Anh = null");
            }
        }
    }

    private void tronBai() {
        gamePanel.removeAll();
        ArrayList<Integer> al = new ArrayList<Integer>();
        for (int i = 0; i < solabai;) {
            int x = (int) (Math.random() * solabai);
            if (!al.contains(x)) {
                al.add(x);
                i++;
                System.out.println(al);
            }
        }

        for (int i = 0; i < solabai; i++) {
            gamePanel.add(labais[al.get(i)]);
            labais[al.get(i)].setBackground(new java.awt.Color(146, 209, 79));
            labais[al.get(i)].setBorder(BorderFactory.createLineBorder(Color.WHITE, 2));
//            labais[al.get(i)].setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));  
            labais[al.get(i)].hienMatSau();
        }
    }

//     private void tronBai() {
//        for (int i = 0; i < labais.length; i++) {
//            // Chọn ngẫu nhiên vị trí lá bài
//            int randomIndex = (int) (Math.random() * labais.length);
//            // Tráo đổi vị trí lá bài i với vị trí ngẫu nhiên được chọn
//            swapCards(i, randomIndex);
//        }
//    }

//    private void swapCards(int i, int j) {
//        Card temp = labais[i];
//        labais[i] = labais[j];
//        labais[j] = temp;
//        gamePanel.add(labais[i]);
//        gamePanel.add(labais[j]);
//        labais[i].hienMatSau();
//        labais[j].hienMatSau();
//    }
    
//    private void kiemtra2() {
//        if (giatri1 != giatri2 && giatri1.getMat() == giatri2.getMat()) {
//            new Thread() {
//                @Override
//                public void run() {
//                    for (int i = 0; i < 3; i++) {
//                        try {
//                            giatri1.hienMatSau();
//                            giatri2.hienMatSau();
//                            Thread.sleep(10);
//                            giatri1.hienMatTruoc();
//                            giatri2.hienMatTruoc();
//                            Thread.sleep(10);
//                        } catch (InterruptedException ex) {
//                            System.out.println(ex);
//                        }
//                    }
//                    giatri1.xoaMat();
//                    giatri2.xoaMat();
//                    for (int i = 0; i < labais.length; i++) {
//                        if (!labais[i].isKhongMat()) {  //Kiem tra tung la bai neu la bai thu i van con mat, tuc isKhongMat = false thi 
//                            chienthang = false;         //set chienthang = false, lap lai toi khi kiem tra het cac la bai
//                            break;
//                        } else {
//                            chienthang = true;
//                        }
//                    }
//                    if (chienthang) {
//                        if (diem > 0) {
//                            JOptionPane.showMessageDialog(gamePanel, "Ban da thang! Diem cua ban la: " + diem);
//                        } else {
//                            JOptionPane.showMessageDialog(gamePanel, "Ban da thua! Diem cua ban la: " + diem);
//                        }
//                        khoitaoGame();
//                    }
//                }
//            }.start();//animation
//            giatri1.removeActionListener(this);
//            giatri2.removeActionListener(this);
//            diem += 100;
//            tvDiem.setText("Score: " + diem);
//        } else {    //Nguoc lei neu mat 2 la bai khac nhau
//            giatri1.hienMatSau();
//            giatri2.hienMatSau();
//            diem -= 10;
//            tvDiem.setText("Score: " + diem);
//        }
//    }

    private void kiemtra() {
        if (giatri1 != giatri2 && giatri1.getMat() == giatri2.getMat()) {
            new Thread() {
                @Override
                public void run() {
                    for (int i = 0; i < 3; i++) {
                        try {
                            giatri1.hienMatSau();
                            giatri2.hienMatSau();
                            Thread.sleep(50);
                            giatri1.hienMatTruoc();
                            giatri2.hienMatTruoc();
                            Thread.sleep(50);
                        } catch (InterruptedException ex) {
                            System.out.println(ex);
                        }
                    }
                    giatri1.xoaMat();
                    giatri2.xoaMat();
                    for (int i = 0; i < labais.length; i++) {
                        if (!labais[i].isKhongMat()) {  //Kiem tra tung la bai neu la bai thu i van con mat, tuc isKhongMat = false thi 
                            chienthang = false;         //set chienthang = false, lap lai toi khi kiem tra het cac la bai
                            break;
                        } else {
                            chienthang = true;
                        }
                    }
                    if (chienthang) {
                        thoigian.stop();
                        nextGame();
                    }
                }
            }.start();//animation
            giatri1.removeActionListener(this);
            giatri2.removeActionListener(this);
//            diem += 100;
//            tvDiem.setText(String.valueOf(diem));
            tvDiem.setText(String.valueOf(Integer.parseInt(tvDiem.getText()) + 100));
        } else {    //Nguoc lei neu mat 2 la bai khac nhau
            giatri1.hienMatSau();
            giatri2.hienMatSau();
//            diem -= 10;
//            tvDiem.setText(String.valueOf(diem));
            tvDiem.setText(String.valueOf(Integer.parseInt(tvDiem.getText()) - 10));
        }
    }

    public void nextGame() {
        this.dispose();
        level = level + 1;
        if (level >= maxLevel) {
            if (Integer.parseInt(tvDiem.getText()) > 0) {
                showDialogNewGame("Bạn đã chiến thắng .\n"
                        + "Điểm: " + Integer.parseInt(tvDiem.getText()) + "\n"
                        + "Bạn có muốn chơi lại không?", "Xin chúc mừng");
            } else {
                showDialogNewGame("Bạn đã thua .\n"
                        + "Điểm: " + Integer.parseInt(tvDiem.getText()) + "\n"
                        + "Bạn có muốn chơi lại không?", "Xin chúc mừng");
            }

        } else {
            new GameFrame(level, Integer.parseInt(tvDiem.getText())/* + (maxTime - time) / 50*/).setVisible(true);
        }
    }

    public void showDialogNewGame(String message, String title) {
        int select = JOptionPane.showOptionDialog(null, message, title,
                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        if (select == 0) {
            newGame();
        } else {
            System.exit(0);
        }
    }

    public void newGame() {
        this.dispose();
        new GameFrame(0, 100).setVisible(true);
    }

    //CodeKhung
    private void hienTroGiup() {
        if (labais[0] != null) {        //La bai dau tien phai duoc khoi tao
            for (int i = 0; i < labais.length; i++) {
                if (!labais[i].isKhongMat()) //LaBaiDangXet phai co mat
                {
                    labais[i].hienMatTruoc();
                    labais[i].removeActionListener((ActionListener) this); //KhongChoPhep thao tac len la bai (xoaHanhDong)
                }
            }
            tvDiem.setText(String.valueOf(Integer.parseInt(tvDiem.getText()) - 50));
//            diem = diem - 50;
//            tvDiem.setText("Diem:" + diem);
        }
    }

    private void anTroGiup() {
        for (int i = 0; i < labais.length; i++) {
            if (!labais[i].isKhongMat()) {
                labais[i].hienMatSau();
                labais[i].addActionListener((ActionListener) this);
            }
        }
    }
    private void tvCloseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tvCloseMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {
            thoigian.stop();
            this.dispose();
        }
    }//GEN-LAST:event_tvCloseMouseClicked

    private void btnChoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChoiActionPerformed
        this.dispose();
        thoigian.stop();
        new GameFrame(0, 100).setVisible(true);
    }//GEN-LAST:event_btnChoiActionPerformed

    private void tvHelpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tvHelpMouseClicked
        if (evt.getButton() == MouseEvent.BUTTON1) {        //ChuotTrai
            if (trogiup == true && demTroGiup > 0) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            hienTroGiup();
                            Thread.sleep(2500);       //10000 milsec = 10 giay, 1 giay = 1000 milsec
                            anTroGiup();
                        } catch (InterruptedException ex) {
                            System.out.println(ex);
                        }
                    }
                }.start();
                demTroGiup--;
            }
        }
//        if (evt.getButton() == MouseEvent.BUTTON3) {
//            if (controlPanel.isVisible()) {
//                setSize(m, n);
//                controlPanel.setVisible(false);
//            } else {
//                setSize(600, 665);
//                controlPanel.setVisible(true);
//            }
//        }
    }//GEN-LAST:event_tvHelpMouseClicked

    private void topPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topPanelMouseDragged
        setLocation(evt.getXOnScreen() - 300, evt.getYOnScreen());
    }//GEN-LAST:event_topPanelMouseDragged

    private void btnTronActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTronActionPerformed
        ArrayList<Integer> al = new ArrayList<Integer>();
        for (int i = 0; i < labais.length; i++) {
            if (!labais[i].isKhongMat()) {
                al.add(i);
            }
        }
        System.out.println(al);
        Collections.shuffle(al);
        System.out.println(al);

//        int i = 0;
//        for (Integer index : al) {
//            gamePanel.add(labais[index]);
//            labais[index].setBounds(i * 160, 0, 160, 160);
//            i++;
//        }
        for (int i = 0; i < al.size(); i++) {
            int index = al.get(i);
            gamePanel.add(labais[index]);
            labais[index].setBounds(i * 160, 0, 160, 160);
        }
        gamePanel.revalidate();
        gamePanel.repaint();
    }//GEN-LAST:event_btnTronActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame(0, 0).setVisible(true);
            }
        });
    }

    //KhaiBaoBien
    int solabai = 6;
    Card[] labais;
    ImageIcon[] mats;
    int trangthai;
//    int diem;
    Card giatri1, giatri2;
    private boolean chienthang;
    private boolean trogiup = false;
    int demTroGiup = 2;
    int m, n;
    int level = 0;
    int sizeX[] = {2, 2, 3, 3, 4, 4, 4, 4, 5, 5};
    int sizeY[] = {3, 4, 4, 6, 6, 7, 8, 10, 10, 12};
    int TIME[] = {15, 25, 35, 50, 65, 80, 100, 120, 140, 150};  //Mang thoi gian ket thuc cua cac vong
    int maxTime = 30, time = 0;
    int maxLevel = 3;
    Timer thoigian;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChoi;
    private javax.swing.JButton btnTron;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JProgressBar progressTime;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel tvClose;
    private javax.swing.JTextField tvDiem;
    private javax.swing.JLabel tvHelp;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {    //Viet Lai Hanh Dong Thuc Hien khi nhan chuot vao tung tam anh, dua tren trang thai (trangthai)
        //de luu lan luot 2 la bai, tranh nhan lai la bai cu vo tac dung va  
        System.out.println(trangthai);
        if (trangthai == 0) {
            giatri1 = (Card) e.getSource();
            giatri1.hienMatTruoc();
            trangthai++;
        } else if (trangthai == 1) {
            thoigian.start();
            trogiup = true;
            Card giatricheck = (Card) e.getSource();
            if (giatricheck != giatri1) {
                trangthai++;
                giatri2 = (Card) e.getSource();
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            giatri2.hienMatTruoc();
                            Thread.sleep(500);
                            kiemtra();
                            Thread.sleep(50);
                            trangthai = 0;
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                    }
                }.start();
            } else {
                JOptionPane.showMessageDialog(null, "Chon vi tri la bai khac voi vi tri la bai ban dau!");
            }
        }
    }
}
